#include <stdio.h>

int max[100][100], alloc[100][100], need[100][100], avail[100];
int n, r;

void input();
void show();
void cal();

int main() {
    printf("** Banker's Algo ****\n");
    input();
    show();
    cal();
    return 0;
}

void input() {
    printf("Enter the number of Processes: ");
    scanf("%d", &n);
    printf("Enter the number of resource instances: ");
    scanf("%d", &r);
    printf("Enter the Max Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < r; j++) {
            scanf("%d", &max[i][j]);
        }
    }
    printf("Enter the Allocation Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < r; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }
    printf("Enter the available Resources:\n");
    for (int j = 0; j < r; j++) {
        scanf("%d", &avail[j]);
    }
}

void show() {
    printf("Process\tAllocation\tMax\tAvailable\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t", i + 1);
        for (int j = 0; j < r; j++) {
            printf("%d ", alloc[i][j]);
        }
        printf("\t");
        for (int j = 0; j < r; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\t");
        if (i == 0) {
            for (int j = 0; j < r; j++) {
                printf("%d ", avail[j]);
            }
        }
    }
}

void cal() {
    int finish[100] = {0}, flag = 1, c1 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < r; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
    printf("\n");
    while (flag) {
        flag = 0;
        for (int i = 0; i < n; i++) {
            int c = 0;
            for (int j = 0; j < r; j++) {
                if ((finish[i] == 0) && (need[i][j] <= avail[j])) {
                    c++;
                    if (c == r) {
                        for (int k = 0; k < r; k++) {
                            avail[k] += alloc[i][j];
                            finish[i] = 1;
                            flag = 1;
                        }
                        printf("P%d->", i);
                        if (finish[i] == 1) {
                            i = n;
                        }
                    }
                }
            }
        }
    }
    for (int i = 0; i < n; i++) {
        if (finish[i] == 1) {
            c1++;
        } else {
            printf("P%d->", i);
        }
    }
    if (c1 == n) {
        printf("\n The system is in safe state\n");
    } else {
        printf("\n Process are in deadlock\n");
        printf(" System is in unsafe state\n");
    }
}
